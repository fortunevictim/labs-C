#include <stdlib.h>
#include <stdio.h>
#include <limits.h>

#define MAX_NODES 5000
#define INTM UINT_MAX

typedef unsigned int uint;

int badcheck(int N, int M, int start, int finish){
    if (start < 1 || start > N || finish < 1 || finish > N){
        printf("bad vertex");
        return 0;
    }
    if (!(0 <= N && N <= MAX_NODES)){
        printf( "%s", "bad number of vertices");
        return 0;
    }
    if (!(0 <= M && M <= (N) * (N + 1) / 2)){
        printf( "%s", "bad number of edges");
        return 0;
    }
    return 1;
}

int compare(uint distance[], uint overflow[], uint node1, uint node2, uint length){
    if (overflow[node1] < overflow[node2])
        return -1;
    if (overflow[node1] > overflow[node2])
        return 1;
    if (distance[node1] + length < distance[node2])
        return -1;
    if (distance[node1] + length > distance[node2])
        return 1;
    return 0;
}

void check_distance(int N, int parent_vertex[], int visited_vertex[], uint distance[], uint overflow[], uint ** graph ){
    for(int i = 0; i < N; i++) {
        int temp = -1;
        for (int j = 0; j < N; j++) {
            if (!visited_vertex[j] && (temp == -1 || distance[j] < distance[temp]))
                temp = j;
        }
        if (distance[temp] == INTM)
            break;
        visited_vertex[temp] = 1;
        for (int j = 0; j < N; j++) {
            if (graph[temp][j] == INTM || j == parent_vertex[temp])
                continue;
            int length = graph[temp][j];
            if (compare(distance, overflow, temp, j, length) == -1) {
                distance[j] = distance[temp] + length;
                overflow[j] = overflow[temp];
                while (distance[j] > INT_MAX) {
                    overflow[j]++;
                    distance[j] = distance[j] - INT_MAX;
                }
                parent_vertex[j] = temp;
            }
        }
    }
}

uint graph_overflow(uint overflow[], int finish, int N, uint ** graph, uint distance[], uint overflow_count){
    if (overflow[finish]){
        for (int i = 0; i < N; ++i){
            if (graph[finish][i] != INTM && distance[i] + graph[finish][i] > INT_MAX)
                overflow_count++;
            if (overflow_count >= 2)
                break;
        }
    }
    return overflow_count;
}

int main() {
    int N, M, index_from, index_to, start, finish,i,j;
    uint weight;
    if (scanf("%d", &N)){}
    if (scanf("%d%d", &start, &finish)){}
    if (scanf("%d", &M)){}
    if (badcheck(N, M, start, finish) == 0)
        return 0;
    start--; finish --;
    uint ** graph = (uint **)calloc((N+1) , sizeof(uint*));
    for (i = 0; i < N; i++) {
        graph[i] = (uint *) calloc((N+1), sizeof(uint));
        for (j = 0; j < N; j++)
            graph[i][j] = INTM;
    }
    int visited_vertex[MAX_NODES];
    int parent_vertex[MAX_NODES];
    uint distance[MAX_NODES];
    uint overflow[MAX_NODES];
    for (i = 0; i < N; i++){
        visited_vertex[i] = 0;
        if(i == start)
            distance[i] = 0;
        else
            distance[i] = INTM;
        overflow[i] = 0;
        parent_vertex[i] = -1;
    }
    for (i = 0; i < M; i++){
        int right_input = scanf("%d%d%u", &index_from, &index_to, &weight);
        if (right_input < 3) {
            printf("bad number of lines");
            for ( j = 0; j < N; j++)
                free(graph[j]);
            free(graph);
            return 0;
        }
        if (index_from < 1 || index_to < 1 || index_from > N || index_to > N){
            printf("bad vertex");
            for ( j = 0; j < N; j++)
                free(graph[j]);
            free(graph);
            return 0;
        }
        if (weight > INT_MAX){
            printf("bad length");
            for ( j = 0; j < N; j++)
                free(graph[j]);
            free(graph);
            return 0;
        }
        graph[index_from - 1][index_to - 1] = weight;
        graph[index_to - 1][index_from - 1] = weight;
    }
    check_distance(N, parent_vertex, visited_vertex, distance, overflow, graph);
    for (i = 0; i < N; ++i){
        if (distance[i] == INTM) printf( "oo ");
        else if (overflow[i] == 1) printf( "INT_MAX+ ");
        else printf("%u ", distance[i]);
    }
    printf("\n");
    uint overflow_count = 0;
    overflow_count = graph_overflow(overflow, finish, N, graph, distance, overflow_count);
    for (i = 0; i < N+1; ++i)
        free(graph[i]);
    free(graph);
    if (start == finish)
        printf("%d\n", start + 1);
    else if (parent_vertex[finish] == -1)
        printf("no path\n");
    else if (overflow[finish] && overflow_count >= 2)
        printf("overflow\n");
    else{
        for (int path_node = finish; path_node != start; path_node = parent_vertex[path_node])
            printf("%d ", path_node + 1);
        printf("%d\n", start + 1);
    }
    return 0;
}
