#include <stdio.h>
#include <limits.h>
#include <stdlib.h>

typedef struct edge {
    int from;
    int to;
    int weight;
} edge;

void closeFile(FILE * fin, FILE * fout){
    fclose(fin);
    fclose(fout);
}

void swap(void *a, void *b, size_t size) {
    size_t i;
    for (i = 0; i < size; i++) {
        char tmp = *((char*) b + i);
        *((char*) b + i) = *((char*) a + i);
        *((char*) a + i) = tmp;
    }
}

void freemem(int * parent, int * rank, int * frame){
    free(parent);
    free(rank);
    free(frame);
}

int find_set (int* parent, int v) {
    if (v == parent[v])
        return v;
    return parent[v] = find_set(parent, parent[v]);
}
void union_sets (int* parent, int* rank, int v1, int v2) {
    v1 = parent[v1];
    v2 = parent[v2];
    if (v1 == v2)
        return;
    if (rank[v1] < rank[v2])
        swap(&v1, &v2, sizeof(int));
    parent[v2] = v1;
    if (rank[v1] == rank[v2])
        rank[v1]++;
}

int compareEdges(const void *a,const void *b){          //Comparison function for use in qsort
    edge *c = ( edge*)a;
    edge *d = ( edge*)b;
    return (c->weight - d->weight);
}

int badfirstinput(int n, int m, FILE * fout){
    if (n < 0 || n > 5000) {
        fprintf(fout, "bad number of vertices");
        fclose(fout);
        return 0;
    }
    if (m < 0 || m > n*(n-1)/2) {
        fprintf(fout, "bad number of edges");
        fclose(fout);
        return 0;
    }
    if (n == 0 || (m == 0 && n != 1)) {
        fprintf(fout, "no spanning tree");
        fclose(fout);
        return 0;
    }
    return 1;
}
int badscancheck(int n, int i,  FILE * fout, FILE * fin, edge *edges){
    if (fscanf(fin, "%d %d %d\n", &edges[i].from, &edges[i].to, &edges[i].weight) == EOF) {
        fprintf(fout, "bad number of lines");
        closeFile(fin, fout);
        return 0;
    }
    if (edges[i].from < 1 || edges[i].from > n || edges[i].to < 1 || edges[i].to > n) {
        fprintf(fout, "bad vertex");
        closeFile(fin, fout);
        return 0;
    }
    if (edges[i].weight < 0 || edges[i].weight > INT_MAX) {
        fprintf(fout, "bad length");
        closeFile(fin, fout);
        return 0;
    }
    return 1;
}

int main() {
    FILE* fin = fopen ("in.txt", "r");
    FILE* fout = fopen ("out.txt", "w");
    int n, m, frame_pos = 0, i;
    if (fscanf(fin, "%d\n%d\n", &n, &m) != 1) {}
    if (badfirstinput(n,m, fout) == 0){
        fclose(fin);
        return 0;
    }
    int* parent = (int*)malloc(sizeof(int)*n);
    int* rank = (int*)malloc(sizeof(int)*n);
    int* frame = (int*)malloc(sizeof(int)*m);
    edge* edges = (edge*)malloc(sizeof(edge)*m);
    if (parent == NULL || rank == NULL || frame == NULL || edges == NULL) {
        fprintf(fout, "mem error");
        closeFile(fin, fout);
        freemem(parent, rank, frame);
        free(edges);
        return 0;
    }
    for (i = 0; i < m; ++i) {
        if (badscancheck(n, i, fout, fin, edges) == 0) {
            freemem(parent, rank, frame);
            free(edges);
            return 0;
        }
        edges[i].from--;
        edges[i].to--;
    }
    if (n == 1) {
        closeFile(fin, fout);
        freemem(parent, rank, frame);
        free(edges);
        return 0;
    }
    if (m < n - 1) {
        fprintf(fout, "no spanning tree");
        freemem(parent, rank, frame);
        free(edges);
        closeFile(fin, fout);
        return 0;
    }
    qsort(edges, m, sizeof(edge), compareEdges);
    for ( i = 0; i < n; ++i) {
        parent[i] = i;
        rank[i] = 0;
    }
    for ( i = 0; i < m; ++i) {
        if (find_set(&parent[0], edges[i].from) == find_set(&parent[0], edges[i].to)) {
            continue;
        }
        union_sets(&parent[0], &rank[0], edges[i].from, edges[i].to);
        frame[frame_pos] = i;
        frame_pos++;
    }
    int root = parent[0];
    for (i = 0; i < n; ++i) {
        if (root != find_set(&parent[0], i)) {
            fprintf(fout, "no spanning tree");
            closeFile(fin, fout);
            freemem(parent, rank, frame);
            free(edges);
            return 0;
        }
    }
    for (i = 0; i < frame_pos; ++i)
        fprintf(fout, "%d %d\n", edges[frame[i]].from + 1, edges[frame[i]].to + 1);
    closeFile(fin, fout);
    freemem(parent, rank, frame);
    free(edges);
    return 0;
}
