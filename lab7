#include <stdlib.h>
#include <stdio.h>

#define MIN(a, b) ((a) < (b) ? a : b)

typedef struct stack{
    int number;
    struct stack *next;
} stack;

typedef struct Graph{
    int* vertex;
    int number;
    int vertexNumber;
} graph;

void push(stack **head, int value){
    stack  *tmp = (stack*) malloc(sizeof(stack));
    tmp-> number = value;
    tmp -> next = *head;
    *head = tmp;
}

int pop(stack **head){
    stack * prev = NULL;
    int val;
    if (head == NULL)
        exit(-1);
    prev = (*head);
    val = prev->number;
    *head = (*head)->next;
    free(prev);
    return val;
}

int check_input(int N, int M){
    if (M < 0 ){
        printf("%s", "bad number of lines");
        exit(1);
    }
    if (N < 0 || N > 1000 ){
        printf("%s", "bad number of vertices");
        exit(1);
    }
    if (N == 0 && M == 1){
        printf("%s", "bad number of edges");
        exit(1);
    }
    if (N == 0 ){
        printf("%s", "bad number of lines");
        exit(1);
    }
    if (M > N*(N - 1)/2){
        printf("%s", "bad number of edges");
        exit(1);
    }
    return 0;
}

void input_ostov_graph(int N, int M, graph * ostov_graph){
    int i;
    for (i = 1; i < N + 1; i++){
        ostov_graph[i].vertex = (int*)calloc(MIN(M, N) + 1, sizeof(int));
        ostov_graph[i].vertexNumber = 0;
        ostov_graph[i].number = i;
    }
}

void check_edges(int* edges, int i, int N){
    if (edges[i] == -1 || edges[i+1] == -1) {
        printf("%s", "bad vertex");
        exit(1);
    }

    if (edges[i] < 1 ||  edges[i+1] < 1 ){
        printf("%s", "bad number of lines");
        exit(1);
    }

    if (edges[i] > N || edges[i+1] > N) {
        printf("%s", "bad vertex");
        exit(1);
    }
}

void free_graph(int N, graph* ostov_graph, int* edges){
    int i;
    for (i = 1; i < N + 1; i++) free(ostov_graph[i].vertex);
    free(edges);
}

int assign_color(graph * curVert, stack stack, graph* ostov_graph, int* sorted, int * m, char * color){
    switch(color[(*curVert).number]){
        case 'b': //black
            break;
        case 'g': // grey
            printf("%s", "impossible to sort");
            exit(1);
        case 'w': // white
            color[(*curVert).number] = 'g';
            stack.number = (*curVert).number;
            push(&stack.next, stack.number);
            int i = 0;
            while((*curVert).vertex[i] != 0 ){
                graph * ptr = &ostov_graph[(*curVert).vertex[i]];
                assign_color(ptr, stack, ostov_graph, sorted, m, color);
                i++;
            }
            color[(*curVert).number] = 'b';
            int a = pop(&stack.next);
            sorted[*m] = a;
            (*m)--;
            break;
    }
    return 0;
}

int input_edges(int N, int M, int* edges, graph* ostov_graph) {
    int i = 0;
    for (i = 0; i < M * 2; i = i + 2){
        if (scanf("%d", &edges[i]) == 0  || edges[i] == 0){
            printf("%s", "bad number of lines");
            exit(1);
        }
        if (scanf("%d", &edges[i+1]) == 0){
            printf("%s", "bad number of lines");
            exit(1);
        }
        check_edges(edges, i, N);
        ostov_graph[edges[i]].vertexNumber += 1;
    }
    for (i = 1; i < M * 2; i = i + 2){
        ostov_graph[edges[i-1]].vertex[ostov_graph[edges[i - 1]].vertexNumber - 1] = edges[i];
        ostov_graph[edges[i-1]].vertexNumber -= 1;
    }
    return 0;
}

int topSort (int N, int* sorted, graph * ostov_graph, int * edges){
    stack stk; int i;
    stk.next = NULL;
    stk.number = -1;
    char * color = (char*)malloc((N + 1)* sizeof(char));
    for (i = 1; i < N+1; i++)
        color[i] = 'w';
    int m = N - 1;
    for (i = 1; i < N + 1; i++){
        graph* buf = &ostov_graph[i];
        assign_color(buf, (stk), ostov_graph, sorted, &m, color);
    }
    free_graph(N, ostov_graph, edges);
    free(color);
    return 0;
}

int main(void) {
    int N = -1, M = -1, i;
    if (scanf("%d", &N) == 0) exit(1);
    if (scanf("%d", &M) == 0 ) exit(1);
    check_input(N, M);
    graph ostov_graph[N + 1];
    int* edges = (int*)malloc(M * 2 * sizeof(int));
    input_ostov_graph(N, M, ostov_graph);
    input_edges(N, M, edges, ostov_graph);
    int sorted[N];
    if (topSort(N, sorted, ostov_graph, edges) == 1) return 1;
    for (i = 0; i < N; i++)
        printf("%d ", sorted[i]);
    exit(0);
}
