#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#define MAS_SIZE 10000

typedef struct stack {
    int mas[MAS_SIZE];
    int size;
}
stack;

void push(stack * st, const int val) {
    st -> mas[st -> size] = val;
    st -> size++;
}

int pop(stack * st) {
    if (st -> size == 0) {
        printf("syntax error");
        exit(0);
    }
    st -> size--;
    return st -> mas[st -> size];
}

int peek(stack * st) {
    if (st -> size <= 0) {
        printf("syntax error");
        exit(0);
    }
    return st -> mas[st -> size - 1];
}

int is_action (char c) {
    if (c == '+' || c == '-' || c == '*' || c == '/' || c == '(' || c == ')') return 1;
    else return 0;
}

int is_digit (char c) {
    if (c >= '0' && c <= '9') return 1;
    else return 0;
}

int good_symb (char c) {
    if (is_action(c) || is_digit(c) || c == '\n') return 1;
    else return 0;
}


int priority (char c) {
    if (c == '(' || c == ')') return 1;
    if (c == '+' || c == '-') return 2;
    if (c == '*' || c == '/') return 3;
    return 0;
}

void to_reversePN(char * str, int size, char * output) {
    int out_size = 0;
    stack temp_stack;
    temp_stack.size = 0;
    for (int i = 0; i < size; ++i) {
        if (is_digit(str[i])) {
            while (!is_action(str[i])) {
                output[out_size] = str[i];
                out_size++;
                i++;
                if (i == size) break;
            }
            output[out_size] = ' ';
            out_size++;
            i--;
        }
        if (is_action(str[i])) {
            if (str[i] == '(') {
                push(&temp_stack, (int) str[i]);
            } else if (str[i] == ')') {
                if (i == 0 || str[i - 1] == '(') {
                    printf("syntax error");
                    exit(0);
                }
                char s = (char) pop(&temp_stack);
                while (s != '(') {
                    output[out_size] = s;
                    out_size++;
                    s = (char) pop( & temp_stack);
                }
            } else {
                if (temp_stack.size > 0 && priority(str[i]) <= priority((char) peek(&temp_stack))) {
                    output[out_size] = (char) pop(&temp_stack);
                    out_size++;
                }
                push(&temp_stack, (int) str[i]);
            }
        }
    }
    while (temp_stack.size > 0) {
        output[out_size] = (char) pop(&temp_stack);
        out_size++;
    }
    output[out_size] = '\0';
}

int computing(char * str) {
    int res = 0;
    stack st;
    st.size = 0;
    int str_size = (int) strlen(str);
    for (int i = 0; i < str_size; ++i) {
        if (is_digit(str[i])) {
            int a = 0;
            while (!is_action(str[i]) && str[i] != ' ') {
                a *= 10;
                a += (int)(str[i] - '0');
                i++;
                if (i == str_size) {
                    break;
                }
            }
            push(&st, a);
            i--;
        } else if (is_action(str[i])) {
            int a = pop(&st), b = pop(&st);
            if (str[i] == '+') res = b + a;
            if (str[i] == '-') res = b - a;
            if (str[i] == '*') res = b * a;
            if (str[i] == '/') {
                if (a == 0) {
                    printf("division by zero");
                    exit(0);
                }
                res = b / a;
            }
            push(&st, res);
        }
    }
    return peek(&st);
}

int main() {
    FILE * fin = fopen("in.txt", "r");
    fseek(fin, 0, SEEK_END);
    int size = ftell(fin) + 1; // there musn't be + 1
    fseek(fin, 0, SEEK_SET);
    char str[MAS_SIZE], reversePN[MAS_SIZE];;
    for (int i = 0; i < size; ++i) {
        if (fscanf(fin, "%c", & str[i]) >= 0) {}
        if (str[i] == '\n') size -= 2;
        if (!good_symb(str[i])) {
            printf("syntax error");
            fclose(fin);
            return 0;
        }
    }
    str[size] = '\0';
    to_reversePN(str, size, reversePN);
    printf("%d", computing(reversePN));
    fclose(fin);
    return 0;
}
